<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.grgbanking.electric.mapper.ICurveMapper">
	<resultMap type="com.grgbanking.electric.entity.Curve" id="curve">
		<id column="ID" property="id" jdbcType="VARCHAR" />
		<result column="TERMINAL_ID" property="terminalId" jdbcType="VARCHAR" />
		<result column="TERMINAL_CODE" property="terminalCode" jdbcType="VARCHAR" />
		<result column="SAMPLE_TIME" property="sampleTime" jdbcType="TIMESTAMP" />
		<result column="ASSEMBLE_HAS" property="assembleHas" jdbcType="INTEGER" />
		<result column="ASSEMBLE_NO" property="assembleNo" jdbcType="INTEGER" />
		<result column="TOTALS" property="totals" jdbcType="INTEGER" />
		<result column="FORWARD_HAS" property="forwardHas" jdbcType="INTEGER" />
		<result column="FORWARD_NO" property="forwardNo" jdbcType="INTEGER" />
		<result column="REVERSE_HAS" property="reverseHas" jdbcType="INTEGER" />
		<result column="REVERSE_NO" property="reverseNo" jdbcType="INTEGER" />
		<result column="ACTIVE" property="active" jdbcType="INTEGER" />
		<result column="CREATE_TIME" property="createTime" jdbcType="TIMESTAMP" />
		<result column="UPDATE_TIME" property="updateTime" jdbcType="TIMESTAMP" />
		<result column="CREATE_BY" property="createBy" jdbcType="VARCHAR" />
		<result column="UPDATE_BY" property="updateBy" jdbcType="VARCHAR" />
		<result column="REMARKS" property="remarks" jdbcType="VARCHAR" />
	</resultMap>

	<sql id="sqlQuery">
        FROM FV_CURVE a left join FV_TERMINAL b on a.TERMINAL_ID = b.ID where 1=1
		
		<if test="param.terminalId != null and param.terminalId != ''">
			AND a.TERMINAL_ID = #{param.terminalId, jdbcType=VARCHAR}
		</if>
		<if test="param.createDateBegin != null and param.createDateBegin != ''">
            AND to_char(a.CREATE_TIME, 'YYYY-MM-DD') <![CDATA[>=]]> #{param.createDateBegin}
        </if>
        <if test="param.createDateEnd != null and param.createDateEnd != ''">
            AND to_char(a.CREATE_TIME, 'YYYY-MM-DD') <![CDATA[<=]]> #{param.createDateEnd}
        </if>
	</sql>
	
	<!-- 根据ID查找 -->
	<select id="getById" resultMap="curve">
    	SELECT * FROM FV_CURVE WHERE ID = #{id, jdbcType=VARCHAR}
  	</select>
  	
  	<!-- 多条件查找 -->
  	<select id="getData" resultMap="curve">
    	SELECT * FROM FV_CURVE WHERE ID = #{param.id, jdbcType=VARCHAR}
  	</select>
  	
  	<select id="count" resultType="java.lang.Integer">
		SELECT COUNT(1) <include refid="sqlQuery"/>
	</select>
	<select id="query" resultMap="curve">
		SELECT t.*
		  FROM (SELECT tt.*, ROWNUM AS ROWNO
		          FROM (SELECT b.CODE TERMINAL_CODE, a.*
		                  <include refid="sqlQuery"/>
		                 ORDER BY a.CREATE_TIME DESC) tt
		         WHERE ROWNUM <![CDATA[<=]]> (#{end, jdbcType=INTEGER} + #{start, jdbcType=INTEGER})) t
		 WHERE t.ROWNO <![CDATA[>=]]> #{start, jdbcType=INTEGER}
	</select>
	<select id="queryAll" resultMap="curve">
		SELECT a.* FROM FV_CURVE a
			order by a.CREATE_TIME desc
	</select>
  	
  	<!-- 新增 -->
  	<insert id="save">
		INSERT INTO FV_CURVE
		  (ID,
		   	SAMPLE_TIME,
			ASSEMBLE_HAS,
			ASSEMBLE_NO,
			TOTALS,
			FORWARD_HAS,
			FORWARD_NO,
			REVERSE_HAS,
			REVERSE_NO,
			TERMINAL_ID,
		   	VERSION,
		   	CREATE_TIME,
		   	CREATE_BY,
		   	REMARKS)
		VALUES
		  (#{param.id, jdbcType=VARCHAR},
		   	#{param.sampleTime, jdbcType=TIMESTAMP},
			#{param.assembleHas, jdbcType=INTEGER},
			#{param.assembleNo, jdbcType=INTEGER},
			#{param.totals, jdbcType=INTEGER},
			#{param.forwardHas, jdbcType=INTEGER},
			#{param.forwardNo, jdbcType=INTEGER},
			#{param.reverseHas, jdbcType=INTEGER},
			#{param.reverseNo, jdbcType=INTEGER},
			#{param.terminalId, jdbcType=VARCHAR},
		   	#{param.version, jdbcType=INTEGER},
		   	#{param.createTime, jdbcType=TIMESTAMP},
		   	#{param.createBy, jdbcType=VARCHAR},
		   	#{param.remarks, jdbcType=VARCHAR})
	</insert>
	
	<!-- 批量新增 -->
	<insert id="saveBatch">
		INSERT INTO FV_CURVE
		  (ID,
		   	SAMPLE_TIME,
			ASSEMBLE_HAS,
			ASSEMBLE_NO,
			TOTALS,
			FORWARD_HAS,
			FORWARD_NO,
			REVERSE_HAS,
			REVERSE_NO,
			TERMINAL_ID,
		   	VERSION,
		   	CREATE_TIME,
		   	CREATE_BY,
		   	REMARKS)   
	    <foreach close=")" collection="list" item="param" index="index" open="(" separator="union">   
    	  select   
       		#{param.id, jdbcType=VARCHAR},
		   	#{param.sampleTime, jdbcType=TIMESTAMP},
			#{param.assembleHas, jdbcType=INTEGER},
			#{param.assembleNo, jdbcType=INTEGER},
			#{param.totals, jdbcType=INTEGER},
			#{param.forwardHas, jdbcType=INTEGER},
			#{param.forwardNo, jdbcType=INTEGER},
			#{param.reverseHas, jdbcType=INTEGER},
			#{param.reverseNo, jdbcType=INTEGER},
			#{param.terminalId, jdbcType=VARCHAR},
		   	#{param.version, jdbcType=INTEGER},
		   	#{param.createTime, jdbcType=TIMESTAMP},
		   	#{param.createBy, jdbcType=VARCHAR},
		   	#{param.remarks, jdbcType=VARCHAR} 
    	  from dual   
	    </foreach>
	</insert>
	
	<update id="update">
		UPDATE FV_CURVE a
		<set>
		<if test="param.sampleTime != null and param.sampleTime != ''">
		 a.SAMPLE_TIME = #{param.sampleTime, jdbcType=TIMESTAMP},
		</if>
		<if test="param.assembleHas != null and param.assembleHas != ''">
		 a.ASSEMBLE_HAS = #{param.assembleHas, jdbcType=INTEGER},
		</if>
		<if test="param.assembleNo != null and param.assembleNo != ''">
		 a.ASSEMBLE_NO = #{param.assembleNo, jdbcType=INTEGER},
		</if>
		<if test="param.totals != null and param.totals != ''">
		 a.TOTALS = #{param.totals, jdbcType=INTEGER},
		</if>
		<if test="param.forwardHas != null and param.forwardHas != ''">
		 a.FORWARD_HAS = #{param.forwardHas, jdbcType=INTEGER},
		</if>
		<if test="param.forwardNo != null and param.forwardNo != ''">
		 a.FORWARD_NO = #{param.forwardNo, jdbcType=INTEGER},
		</if>
		<if test="param.reverseHas != null and param.reverseHas != ''">
		 a.REVERSE_HAS = #{param.reverseHas, jdbcType=INTEGER},
		</if>
		<if test="param.terminalId != null and param.terminalId != ''">
		 a.TERMINAL_ID = #{param.terminalId, jdbcType=VARCHAR},
		</if>
		a.UPDATE_TIME = #{param.updateTime, jdbcType=TIMESTAMP},
		a.UPDATE_BY = #{param.updateBy, jdbcType=VARCHAR}
		</set>
		WHERE a.ID = #{param.id, jdbcType=VARCHAR}
	</update>
	
	<!-- 根据ID删除-->
	<delete id="deleteById">
		delete FROM FV_CURVE a where a.ID = #{id, jdbcType=VARCHAR}
	</delete>
	
	<!-- 多条件删除 -->
	<delete id="delete">
		delete FROM FV_CURVE a where a.ID = #{param.id, jdbcType=VARCHAR}
	</delete>
	
	<!-- 根据ID批量删除-->
	<delete id="deleteByIds">
		delete FROM FV_CURVE a where a.ID in (
		<foreach collection="ids" item="id" index="index" separator="," >
		  #{id, jdbcType=VARCHAR}
		</foreach>)
	</delete>
</mapper>